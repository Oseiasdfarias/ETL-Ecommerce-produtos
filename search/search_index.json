{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"\ud83c\udfa5 Rede Social <p>   \u2022 Tecnologias   \u2022  Solu\u00e7\u00e3o    \u2022  Rede Social  </p> Projeto Pipeline ETL com Python para Obter Informa\u00e7\u00f5es de Produtos do Mercado Livre <p>Projeto de ETL GitHub.</p>"},{"location":"#techs","title":"Tecnologias","text":"ETL E-commerce Mercado Livre <p>Proposta do Projeto</p> <p>Imagine que uma marca de t\u00eanis deseja avaliar sua relev\u00e2ncia no ecossistema do Mercado Livre. Para isso, \u00e9 necess\u00e1rio obter KPIs relacionadas ao segmento de t\u00eanis na plataforma. O objetivo \u00e9 coletar informa\u00e7\u00f5es detalhadas e implementar um dashboard que facilite a visualiza\u00e7\u00e3o e an\u00e1lise desses dados.</p> <p>Sua equipe de Dados ficou respons\u00e1vel por realizar esse projeto.</p>"},{"location":"#id1","title":"Solu\u00e7\u00e3o do problema de neg\u00f3cio","text":"Etapas <ul> <li>Etapa 1: Extra\u00e7\u00e3o dos dados usanda Web Scraping;</li> <li>Etapa 2: Transforma\u00e7\u00e3o dos dados usando Pandas;</li> <li>Etapa 3: Carregamento dos dados em uma banco de dados SQLite3;</li> <li>Etapa 4: Consumindo os dados usando uma Dashboard com Streamlit;</li> </ul> Pipeline Estrutura do Projeto <pre><code>.\n\u251c\u2500\u2500 data\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 data.json\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 quotes.db\n\u251c\u2500\u2500 docs\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 about.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.md\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 javascripts\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 stylesheets\n\u251c\u2500\u2500 mkdocs.yml\n\u251c\u2500\u2500 poetry.lock\n\u251c\u2500\u2500 problema_de_negocio.md\n\u251c\u2500\u2500 pyproject.toml\n\u251c\u2500\u2500 README.md\n\u251c\u2500\u2500 reports\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 docs\n\u251c\u2500\u2500 requirements.txt\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 coleta\n    \u251c\u2500\u2500 dashboard\n    \u251c\u2500\u2500 scrapy.cfg\n    \u2514\u2500\u2500 transformacao\n</code></pre>"},{"location":"#id1","title":"Como executar o Projeto","text":"<p>Primeiramente, acesse a pasta do projeto e instale as depend\u00eancias usando o pip ou o Poetry. Para isso, execute um dos comandos abaixo:</p> <p><code>poetry install</code> ou  <code>pip install -r requirements.txt</code></p> <p>Agora em seguida, para executar cada etapa, siga as instru\u00e7\u00f5es abaixo:</p> Extra\u00e7\u00e3o dos dados usanda Web Scraping <p><code>scrapy crawl mercadolivre -o ../data/data.json</code></p> Transformar e carregar <p><code>python src/transformacao/main.py</code></p> Visualizar Dashbard <p><code>streamlit run src/dashboard/app.py</code></p>"},{"location":"#id9","title":"\ud83c\udfa5 Rede Social","text":""},{"location":"docs/dashboard/","title":"Docs M\u00f3dulo Dashboard","text":""},{"location":"docs/dashboard/#src.dashboard.app.Dashboard","title":"<code>src.dashboard.app.Dashboard</code>","text":"<p>Classe que implementa a amina\u00e7\u00e3o do Aerop\u00eandulo.</p> Atributo <p>estrutura_db: Cria a estrutura do Dashboard.</p> Source code in <code>src/dashboard/app.py</code> <pre><code>class Dashboard:\n    \"\"\"\n    Classe que implementa a amina\u00e7\u00e3o do Aerop\u00eandulo.\n\n    Atributo:\n        estrutura_db: Cria a estrutura do Dashboard.\n    \"\"\"\n    def __init__(self, df) -&gt; None:\n        \"\"\"\n        Iniciador da classe.\n\n        Args:\n            df: DataFrame pandas com os dados para serem mostrados no Dashboard.\n        Returns:\n            Renorna um None.\n        \"\"\"\n        self.df = df\n        self.pg_title = \"Pesquisa de Mercado - T\u00eanis Esportivos no Mercado Livre\"\n        st.set_page_config(page_title=self.pg_title,\n                           layout=\"wide\",\n                           initial_sidebar_state=\"collapsed\")\n        self.pages = [\"Docs\", \"Portf\u00f3lio\", \"LinkedIn\", \"GitHub\"]\n        self.styles = {\n            \"nav\": {\n                \"background-color\": \"#44475a\",\n            },\n            \"div\": {\n                \"max-width\": \"32rem\",\n            },\n            \"span\": {\n                \"border-radius\": \"0.5rem\",\n                \"color\": \"#EFEFEF\",\n                \"margin\": \"0 0.125rem\",\n                \"padding\": \"0.4375rem 0.625rem\",\n            },\n            \"active\": {\n                \"background-color\": \"rgba(255, 255, 255, 0.25)\",\n            },\n            \"hover\": {\n                \"background-color\": \"rgba(255, 255, 255, 0.35)\",\n            }\n        }\n        self.options = {\n            \"show_menu\": False,\n            \"show_sidebar\": False,\n        }\n\n        self.urls = {\n            \"Docs\": \"#\",\n            \"GitHub\": \"https://github.com/Oseiasdfarias/ETL-Ecommerce-produtos\",\n            \"LinkedIn\": \"https://www.linkedin.com/in/oseiasfarias/\",\n            \"Portf\u00f3lio\": \"https://oseiasfarias.info\"}\n        self.page = st_navbar(self.pages, styles=self.styles,\n                        urls=self.urls, options=self.options)\n\n        # T\u00edtulo da aplica\u00e7\u00e3o\n        st.title('Pesquisa de Mercado - T\u00eanis Esportivos no Mercado Livre')\n        self.estrutura_db()\n\n\n    def estrutura_db(self):\n        \"\"\"M\u00e9todo respon\u00e1vel por implementar a estrutura do Dashboard.\"\"\"\n        # Melhorar o layout com colunas para KPIs\n        st.subheader(\"KPIs Principais\")\n        col1, col2, col3 = st.columns(3)\n\n        # KPI 1: N\u00famero total de itens\n        total_items = self.df.shape[0]\n        col1.metric(label=\"N\u00famero Total de Itens\", value=total_items)\n\n        # KPI 2: N\u00famero de marcas \u00fanicas\n        unique_brands = self.df['brand'].nunique()\n        col2.metric(label=\"N\u00famero de Marcas \u00danicas\", value=unique_brands)\n\n        # KPI 3: Pre\u00e7o m\u00e9dio novo (em reais)\n        average_new_price = self.df['new_price'].mean()\n        col3.metric(label=\"Pre\u00e7o M\u00e9dio Novo (R$)\", value=f\"{average_new_price:.2f}\")\n\n        # Quais marcas s\u00e3o mais encontradas at\u00e9 a 10\u00aa p\u00e1gina\n        st.subheader('Marcas mais encontradas at\u00e9 a 10\u00aa p\u00e1gina')\n        col1, col2 = st.columns([4, 2])\n        top_10_pages_brands = (self.df['brand']\n                            .value_counts()\n                            .sort_values(ascending=False)\n                            .to_frame()\n                            .reset_index())\n        fig = px.bar(top_10_pages_brands, x='brand', y='count', text_auto='.2s')\n        col1.plotly_chart(fig)\n        col2.write(top_10_pages_brands)\n\n\n        # Qual o pre\u00e7o m\u00e9dio por marca\n        st.subheader('Pre\u00e7o m\u00e9dio por marca')\n        col1, col2 = st.columns([4, 2])\n        average_price_by_brand = (self.df.groupby('brand')\n                                ['new_price']\n                                .mean()\n                                .sort_values(ascending=False)\n                                .to_frame()\n                                .reset_index())\n        fig1 = px.bar(average_price_by_brand, x='brand',\n                    y='new_price', text_auto='.2s')\n        col1.plotly_chart(fig1)\n        col2.write(average_price_by_brand)\n\n        # Qual a satisfa\u00e7\u00e3o por marca\n        st.subheader('Satisfa\u00e7\u00e3o por marca')\n        col1, col2 = st.columns([4, 2])\n        df_non_zero_reviews = self.df[self.df['reviews_rating_number'] &gt; 0]\n        satisfaction_by_brand = (df_non_zero_reviews\n                                .groupby('brand')\n                                ['reviews_rating_number']\n                                .mean()\n                                .sort_values(ascending=False)\n                                .to_frame()\n                                .reset_index())\n        fig2 = px.bar(satisfaction_by_brand, x='brand',\n                    y='reviews_rating_number', text_auto='.2s')\n        col1.plotly_chart(fig2)\n        col2.write(satisfaction_by_brand)\n</code></pre>"},{"location":"docs/dashboard/#src.dashboard.app.Dashboard.estrutura_db","title":"<code>estrutura_db()</code>","text":"<p>M\u00e9todo respon\u00e1vel por implementar a estrutura do Dashboard.</p> Source code in <code>src/dashboard/app.py</code> <pre><code>def estrutura_db(self):\n    \"\"\"M\u00e9todo respon\u00e1vel por implementar a estrutura do Dashboard.\"\"\"\n    # Melhorar o layout com colunas para KPIs\n    st.subheader(\"KPIs Principais\")\n    col1, col2, col3 = st.columns(3)\n\n    # KPI 1: N\u00famero total de itens\n    total_items = self.df.shape[0]\n    col1.metric(label=\"N\u00famero Total de Itens\", value=total_items)\n\n    # KPI 2: N\u00famero de marcas \u00fanicas\n    unique_brands = self.df['brand'].nunique()\n    col2.metric(label=\"N\u00famero de Marcas \u00danicas\", value=unique_brands)\n\n    # KPI 3: Pre\u00e7o m\u00e9dio novo (em reais)\n    average_new_price = self.df['new_price'].mean()\n    col3.metric(label=\"Pre\u00e7o M\u00e9dio Novo (R$)\", value=f\"{average_new_price:.2f}\")\n\n    # Quais marcas s\u00e3o mais encontradas at\u00e9 a 10\u00aa p\u00e1gina\n    st.subheader('Marcas mais encontradas at\u00e9 a 10\u00aa p\u00e1gina')\n    col1, col2 = st.columns([4, 2])\n    top_10_pages_brands = (self.df['brand']\n                        .value_counts()\n                        .sort_values(ascending=False)\n                        .to_frame()\n                        .reset_index())\n    fig = px.bar(top_10_pages_brands, x='brand', y='count', text_auto='.2s')\n    col1.plotly_chart(fig)\n    col2.write(top_10_pages_brands)\n\n\n    # Qual o pre\u00e7o m\u00e9dio por marca\n    st.subheader('Pre\u00e7o m\u00e9dio por marca')\n    col1, col2 = st.columns([4, 2])\n    average_price_by_brand = (self.df.groupby('brand')\n                            ['new_price']\n                            .mean()\n                            .sort_values(ascending=False)\n                            .to_frame()\n                            .reset_index())\n    fig1 = px.bar(average_price_by_brand, x='brand',\n                y='new_price', text_auto='.2s')\n    col1.plotly_chart(fig1)\n    col2.write(average_price_by_brand)\n\n    # Qual a satisfa\u00e7\u00e3o por marca\n    st.subheader('Satisfa\u00e7\u00e3o por marca')\n    col1, col2 = st.columns([4, 2])\n    df_non_zero_reviews = self.df[self.df['reviews_rating_number'] &gt; 0]\n    satisfaction_by_brand = (df_non_zero_reviews\n                            .groupby('brand')\n                            ['reviews_rating_number']\n                            .mean()\n                            .sort_values(ascending=False)\n                            .to_frame()\n                            .reset_index())\n    fig2 = px.bar(satisfaction_by_brand, x='brand',\n                y='reviews_rating_number', text_auto='.2s')\n    col1.plotly_chart(fig2)\n    col2.write(satisfaction_by_brand)\n</code></pre>"}]}